package com.rodriguez.firstone;

import static com.codename1.ui.CN.*;

import com.codename1.components.InfiniteProgress;
import com.codename1.components.InteractionDialog;
import com.codename1.components.ScaleImageLabel;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.Log;
import com.codename1.io.NetworkManager;
import com.codename1.ui.*;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.geom.Dimension;
import com.codename1.ui.layouts.*;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridBagConstraints;
import com.codename1.ui.layouts.GridBagLayout;
import com.codename1.ui.plaf.Border;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import com.sun.tools.javac.comp.Flow;

import javax.xml.soap.Text;
import java.awt.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class CrowdStudy {

    private Form current;
    private Resources theme;
    private String testingURL = "http://127.0.0.1:8000/api/";
    private Toolbar tb;
    private Form home;
    private Container homeBody;
    private Container qList;
    private Form specGroup;
    private Form generatePractice;
    private LinkedHashMap selectGroup;
    private InteractionDialog curDLG = null;

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);
    }

    public void start() {

        if (current != null) {
            current.show();
            return;
        }
        specGroup = new Form("Group", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE));
        generatePractice = new Form("Practice Test", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE));

        home = new Form("Crowd Study", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE));
        home.getAllStyles().setPadding(0,0,0,0);
        home.setLayout(new BoxLayout(BoxLayout.Y_AXIS));

        Style s = UIManager.getInstance().getComponentStyle("TitleCommand");
        FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_ADD, s);
        home.getToolbar().addCommandToLeftBar("",icon,(e) -> {
            if (curDLG == null) {
                InteractionDialog dlg = new InteractionDialog();

                dlg.setLayout(new BorderLayout());
                dlg.getStyle().setBgColor(0xADECC9);

                Container ctn = new Container(BoxLayout.y());
                TextField name = new TextField("", "Group name", 20, TextArea.ANY);
                ctn.add(name);
                TextField password = new TextField("", "Group password", 20, TextField.ANY);
                ctn.add(password);
                dlg.add(BorderLayout.CENTER, ctn);


                Button create = new Button("Create");
                create.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent evt) {
                        ArrayList<String[]> params = new ArrayList<String[]>();
                        params.add(new String[]{"name", name.getText()});
                        params.add(new String[]{"password", password.getText()});
                        postUrl("make-group/", params);
                        setupPopulars(home);
                        dlg.dispose();
                        curDLG = null;
                    }
                });
                Button dismiss = new Button("Dismiss");
                dismiss.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent evt) {
                        dlg.dispose();
                        curDLG = null;
                    }
                });
                dismiss.getStyle().setMargin(5, 0, 0, 0);
                Container optionHolder = new Container(BoxLayout.y());
                optionHolder.add(create);
                optionHolder.add(dismiss);
                dlg.addComponent(BorderLayout.SOUTH, optionHolder);
                dlg.show(100, 150, 50, 50);
                curDLG = dlg;
            } else {
                curDLG.dispose();
                curDLG = null;
            }

        });


        Style iconStyle = home.getUIManager().getComponentStyle("Title");
//        FontImage leftArrow = FontImage.createMaterial(FontImage.MATERIAL_PLUS, iconStyle, 4);

        ArrayList<String[]> params = new ArrayList<String[]>();
        params.add(new String[]{"name","filling in random stuff"});
        params.add(new String[]{"password","stuff-happening"});
        homeBody = new Container(new BorderLayout());
        home.add(homeBody);
//        postUrl("make-group/", params);
        setupPopulars(home);
        home.getStyle().setBgColor(0xADECC9);
        home.show();

        selectGroupGeneralSettings();
        generatePracticeGeneralSettings();
    }

    public void selectGroupGeneralSettings() {
        Style s = UIManager.getInstance().getComponentStyle("TitleCommand");
        FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_ADD, s);
        FontImage icon2 = FontImage.createMaterial(FontImage.MATERIAL_ARROW_BACK, s);
        specGroup.getToolbar().addCommandToLeftBar("",icon2,(e) -> updateHome());
        qList = new Container(BoxLayout.y());
        specGroup.add(BorderLayout.CENTER, qList);
        specGroup.getToolbar().addCommandToRightBar("", icon, (e) -> {
            if (curDLG == null) {
                InteractionDialog dlg = new InteractionDialog();
                dlg.setLayout(new BorderLayout());
                dlg.getStyle().setBgColor(0xADECC9);
                TextField q = new TextField("", "Question", 20, TextArea.ANY);
                TextArea a = new TextArea("", 5, 20, TextArea.ANY);
                a.setHint("Answer");

                dlg.addComponent(BorderLayout.NORTH, q);
                dlg.addComponent(BorderLayout.CENTER, a);
                Button close = new Button("Add");
                close.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        System.out.println("Question Created");
                        System.out.println(q.getText());
                        System.out.println(a.getText());
                        ArrayList<String[]> params = new ArrayList<String[]>();
                        params.add(new String[]{"txt", q.getText()});
                        params.add(new String[]{"answer", a.getText()});
                        params.add(new String[]{"sgid", Integer.toString(((Double) selectGroup.get("id")).intValue())});
                        postUrl("make-question/", params);
                        qList.removeAll();
                        makeQList();
                        specGroup.show();
                        dlg.dispose();
                        curDLG = null;

                    }
                });

                Button dismiss = new Button("Dismiss");
                dismiss.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent evt) {
                        dlg.dispose();
                        curDLG = null;
                    }
                });
                dismiss.getStyle().setMargin(5, 0, 0, 0);
                Container optionHolder = new Container(BoxLayout.y());
                optionHolder.add(close);
                optionHolder.add(dismiss);
                dlg.addComponent(BorderLayout.SOUTH, optionHolder);
                dlg.show(100, 100, 50, 50);
                curDLG = dlg;
            } else {
                curDLG.dispose();
                curDLG = null;
            }
        });
    }

    public void generatePracticeGeneralSettings () {
        Style s = UIManager.getInstance().getComponentStyle("TitleCommand");
        FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_CHECK, s);
        FontImage icon2 = FontImage.createMaterial(FontImage.MATERIAL_ARROW_BACK, s);
        generatePractice.getToolbar().addCommandToLeftBar("", icon2, (e) -> setupSelectHome(true));
    }

    public void setupPractice (int numOfQ) {
        if(curDLG != null) {
            curDLG.dispose();
            curDLG = null;
        }
        generatePractice.getStyle().setBgColor(0xADECC9);
        ArrayList<LinkedHashMap> questions = (ArrayList<LinkedHashMap>)selectGroup.get("questions");
        ArrayList<LinkedHashMap> selectedQuestions = new ArrayList<LinkedHashMap>();
        ArrayList<TextArea> attempts = new ArrayList<TextArea>();
        ArrayList<Label> answers = new ArrayList<Label>();

        for (int i = 0; i<numOfQ; i++) {
            Boolean alreadyExists = false;
            Boolean st = false;
            while (alreadyExists == false && st == false) {
                st = true;
                int index = Math.round((float) Math.random()*(questions.size()-1));
                alreadyExists = false;
                for (int e=0; e<selectedQuestions.size(); e++) {
                    if (questions.get(i).equals(selectedQuestions.get(e))) {
                        alreadyExists = true;
                    }
                }
            }
            selectedQuestions.add(questions.get(i));

        }
        Container qList = new Container(BoxLayout.y());
        for (int i=0; i<selectedQuestions.size(); i++) {
            Container qnA = new Container(BoxLayout.y());
            TextArea q = new TextArea("Question " + (Integer.toString(i+1)) + ": "  + selectedQuestions.get(i).get("text"), 2, 20,TextArea.ANY);
            q.setEditable(false);
            q.getStyle().setBorder(Border.createEmpty());
            q.getStyle().setBgColor(0xE1FCF5);
            TextArea ta = new TextArea("", 3, 20, TextArea.ANY);
            ta.setHint("Your answer");
            Label l = new Label(" ");
            answers.add(l);
            attempts.add(ta);
            qnA.add(q);
            qnA.add(ta);
            qnA.add(l);
            qnA.getStyle().setMargin(5,5,10,10);
            qnA.getStyle().setBgColor(0xADECC9);
            qList.add(qnA);

        }
        qList.setScrollableY(true);
        generatePractice.add(BorderLayout.NORTH, qList);

        Style s = UIManager.getInstance().getComponentStyle("TitleCommand");
        Button check = new Button();
        check.getStyle().setFgColor(0x99F3C9);
        check.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                for(int l=0; l<answers.size(); l++) {
//                    System.out.println();
                    if (attempts.get(l).getText().equals(selectedQuestions.get(l).get("answer"))) {
                        answers.get(l).setText("Correct!");
                    } else {
                        answers.get(l).setText("Incorrect!");
                    }
                }
            }
        });
        check.setText("Correct Answers");
        qList.add(check);


//        generatePractice.setScrollableY(true);
        generatePractice.show();

    }


    public void setupPopulars(Form curForm) {
        homeBody.removeAll();

        Container searchBar = new Container(new GridBagLayout());
        Container ctn = new Container(new BorderLayout());

        ArrayList<LinkedHashMap> groups = getUrl("all-groups");

        TextField searchField = new TextField("", "Your Search", 20, TextArea.ANY);
        searchField.getStyle().setBorder(Border.createRoundBorder(25,25));
        searchField.getSelectedStyle().setBorder(Border.createRoundBorder(25,25));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.91;
        ctn.add(BorderLayout.CENTER, searchField);
        searchBar.add(gbc, ctn);
        Style s = UIManager.getInstance().getComponentStyle("TitleCommand");
        FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_SEARCH, s);
        Button query = new Button();
        query.getStyle().setBgTransparency(0);
        query.setIcon(icon);
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 0.09;
        searchBar.add(gbc, query);
        query.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                boolean searchResultExists = false;

                LinkedHashMap result = null;
                for(int i=0; i<groups.size(); i++) {
                    if (searchField.getText().equals(groups.get(i).get("name"))) {
                        searchResultExists = true;
                        result = groups.get(i);
                        break;
                    }
                }
                if (curDLG == null && result != null) {
                    LinkedHashMap r = result;
                    InteractionDialog dlg = new InteractionDialog((String) result.get("name"));
                    dlg.setLayout(new BorderLayout());
                    TextField tf = new TextField("", "Password", 20, TextArea.ANY);
                    dlg.addComponent(BorderLayout.NORTH, tf);
                    Button close = new Button("Join");
                    close.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent evt) {
                            System.out.println("Join clicked");
                            System.out.println(tf.getText() + r.get("password"));
                            String password = (String) r.get("password");
                            if (tf.getText().equals(password)) {
                                dlg.dispose();
                                curDLG = null;
                                System.out.println("in");
                                specGroup.show();
                                specGroup.setTitle((String) r.get("name"));
                                selectGroup = r;
                                setupSelectHome(false);


                            } else {
                                System.out.println("out");
                                dlg.dispose();
                                curDLG = null;
                            }

                        }
                    });
                    Button dismiss = new Button("Dismiss");
                    dismiss.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
                            dlg.dispose();
                            curDLG = null;
                        }
                    });
                    dismiss.getStyle().setMargin(5, 0, 0, 0);
                    Container optionHolder = new Container(BoxLayout.y());
                    optionHolder.add(close);
                    optionHolder.add(dismiss);
                    dlg.addComponent(BorderLayout.SOUTH, optionHolder);
                    dlg.show(100, 150, 50, 50);
                    curDLG = dlg;
                } else if (result != null){
                    curDLG.dispose();
                    curDLG = null;
                }
            }
        });
        homeBody.add(BorderLayout.NORTH, searchBar);

        Container cList = new Container(BoxLayout.y());
        Label title = new Label("Popular Study Guides:");
        title.getStyle().setBgColor(0x26A367);
        title.getStyle().setFgColor(0x99F3C9);

        title.getStyle().setBgTransparency(255);
        title.getStyle().setMargin(10,0,5,10);
        cList.add(title);
        Container optionHolder = new Container();
        optionHolder.getAllStyles().setMargin(0,0,5,0);
        for (int i=0; i<groups.size(); i++) {
            LinkedHashMap g = groups.get(i);
            String btnText = (String) g.get("name");
            Button ex = new Button(btnText);
            ex.getStyle().setBgTransparency(0);
            ex.getStyle().setFgColor(0x005527);
            Container cnt = new Container(new FlowLayout());
            cnt.add(ex);
//            ex.addActionListener(e -> Dialog.show(ex.getText(), "Start: ","Join",null));


            ex.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    if (curDLG == null) {
                        InteractionDialog dlg = new InteractionDialog(btnText);
                        dlg.setLayout(new BorderLayout());
                        TextField tf = new TextField("", "Password", 20, TextArea.ANY);
                        dlg.addComponent(BorderLayout.NORTH, tf);
                        Button close = new Button("Join");
                        close.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent evt) {
                                System.out.println("Join clicked");
                                System.out.println(tf.getText() + g.get("password"));
                                String password = (String) g.get("password");
                                if (tf.getText().equals(password)) {
                                    dlg.dispose();
                                    curDLG = null;
                                    System.out.println("in");
                                    specGroup.show();
                                    specGroup.setTitle((String) g.get("name"));
                                    selectGroup = g;
                                    setupSelectHome(false);


                                } else {
                                    System.out.println("out");
                                    dlg.dispose();
                                    curDLG = null;
                                }

                            }
                        });
                        Button dismiss = new Button("Dismiss");
                        dismiss.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                dlg.dispose();
                                curDLG = null;
                            }
                        });
                        dismiss.getStyle().setMargin(5, 0, 0, 0);
                        Container optionHolder = new Container(BoxLayout.y());
                        optionHolder.add(close);
                        optionHolder.add(dismiss);
                        dlg.addComponent(BorderLayout.SOUTH, optionHolder);
                        dlg.show(100, 150, 50, 50);
                        curDLG = dlg;
                    } else {
                        curDLG.dispose();
                        curDLG = null;
                    }
                }
            });
            cnt.getStyle().setMargin(0,0,10,10);
//
            cList.add(cnt);
        }

        cList.getStyle().setBgColor(0x26A367);
        cList.getStyle().setBgTransparency(255);
        cList.getStyle().setMargin(5,0,10,10);
        cList.setScrollableY(true);
        homeBody.add(BorderLayout.CENTER, cList);
//        body.addComponent(cList);
//        body.getStyle().setBgColor(0x99CCCC);
//        body.getStyle().setBgTransparency(255);

    }

    public void updateHome() {
        if(curDLG != null) {
            curDLG.dispose();
            curDLG = null;
        }
        setupPopulars(home);
        home.showBack();
        qList.removeAll();
        selectGroup = null;
        current = home;
    }



    public void makeQList() {
        selectGroup = getGroupById(Integer.toString(((Double) selectGroup.get("id")).intValue())).get(0);
        ArrayList<LinkedHashMap> questions = (ArrayList<LinkedHashMap>) selectGroup.get("questions");

        for(int i=0; i<questions.size(); i++) {
            String qT = (String) questions.get(i).get("text");
            String aT = (String) questions.get(i).get("answer");
            Container ctn = new Container(new BorderLayout());
            Button b = new Button((String) questions.get(i).get("text"));

            b.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    if (curDLG == null) {
                        InteractionDialog dlg = new InteractionDialog();

                        dlg.setLayout(new BorderLayout());
                        dlg.getStyle().setBgColor(0xADECC9);

                        TextArea q = new TextArea("Question: " + qT, 2, 20, TextArea.ANY);
                        q.setEditable(false);
                        dlg.add(BorderLayout.NORTH, q);
                        q.getStyle().setBorder(Border.createEmpty());
                        q.getStyle().setBgColor(0xADECC9);

                        Container c = new Container(BoxLayout.y());
                        TextArea ta = new TextArea("", 3, 20, TextArea.ANY);
                        ta.setHint("Your answer");
                        Label l = new Label(" ");

                        c.add(ta);
                        c.add(l);

                        dlg.addComponent(BorderLayout.CENTER, c);
                        Button check = new Button("Check");
                        check.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                if (ta.getText().equals(aT)) {
                                    l.setText("Correct!");
                                } else {
                                    l.setText("Incorrect!");
                                }
                            }
                        });
                        Button dismiss = new Button("Dismiss");
                        dismiss.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                dlg.dispose();
                                curDLG = null;
                            }
                        });
                        dismiss.getStyle().setMargin(5, 0, 0, 0);
                        Container optionHolder = new Container(BoxLayout.y());
                        optionHolder.add(check);
                        optionHolder.add(dismiss);
                        dlg.addComponent(BorderLayout.SOUTH, optionHolder);
                        dlg.show(90, 65, 50, 50);
                        curDLG = dlg;
                    } else {
                        curDLG.dispose();
                        curDLG = null;
                    }
                }
            });

            b.getStyle().setBgColor(0xADECC9);
            ctn.add(BorderLayout.CENTER, b);
            ctn.getStyle().setMargin(5,5,2,2);
            qList.add(ctn);
            qList.setScrollableY(true);



        }


    }

    public void setupSelectHome(Boolean isReturning){
        if(curDLG != null) {
            curDLG.dispose();
            curDLG = null;
        }
        selectGroup = getGroupById(Integer.toString(((Double) selectGroup.get("id")).intValue())).get(0);
        ArrayList<LinkedHashMap> questions = (ArrayList<LinkedHashMap>) selectGroup.get("questions");

        makeQList();

        specGroup.getStyle().setBgColor(0xADECC9);
        Button generate = new Button("Generate Practice");
        generate.getStyle().setMargin(0,0,0,0);
        generate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (curDLG == null) {
                    InteractionDialog dlg = new InteractionDialog();

                    dlg.setLayout(new BorderLayout());
                    dlg.getStyle().setBgColor(0xADECC9);

                    Label l = new Label("How many questions?");
                    dlg.add(BorderLayout.NORTH, l);

                    selectGroup = getGroupById(Integer.toString(((Double) selectGroup.get("id")).intValue())).get(0);
                    ArrayList<LinkedHashMap> questions = (ArrayList<LinkedHashMap>) selectGroup.get("questions");

                    final Slider sl = new Slider();
                    int max = questions.size();
                    int min = 0;
                    System.out.println(max);

                    sl.setText(Integer.toString(max / 2));
                    sl.setProgress(max / 2);
                    sl.setMaxValue(max);
                    sl.getStyle().setBgColor(0x015D32);
                    sl.setMinValue(min);
                    sl.setEditable(true);
                    sl.setRenderValueOnTop(true);


                    dlg.addComponent(BorderLayout.CENTER, sl);
                    Button check = new Button("Generate");
                    Button dismiss = new Button("Dismiss");
                    check.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
                            dlg.dispose();
                            curDLG = null;
                            setupPractice(sl.getProgress());

                        }
                    });
                    dismiss.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
                            dlg.dispose();
                            curDLG = null;
                        }
                    });
                    dismiss.getStyle().setMargin(5, 0, 0, 0);
                    Container optionHolder = new Container(BoxLayout.y());
                    optionHolder.add(check);
                    optionHolder.add(dismiss);
                    dlg.addComponent(BorderLayout.SOUTH, optionHolder);
                    dlg.show(100, 150, 50, 50);
                    curDLG = dlg;
                    //                setupPractice();
                } else {
                    curDLG.dispose();
                    curDLG = null;
                }
            }
        });
        generate.getStyle().setBgColor(0x2DB271);
        generate.getStyle().setFgColor(0xADECC9);
        specGroup.add(BorderLayout.SOUTH, generate);
        System.out.println("Got this far!");
        if (isReturning) {
            specGroup.showBack();
        } else {
            specGroup.show();
        }

    }

    public ArrayList getUrl(String url) {
        ConnectionRequest req2=new ConnectionRequest();
        req2.setUrl(testingURL+url);
        req2.setPost(false);
        NetworkManager.getInstance().addToQueueAndWait(req2);
        JSONParser parser = new JSONParser();

        Map result = null;
        ArrayList activities=null;
        try {
            result =  parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req2.getResponseData())));

        } catch (IOException e) {
            e.printStackTrace();
        }

        ArrayList<LinkedHashMap> resultsArray = (ArrayList<LinkedHashMap>) result.get("root");

//        activities = (ArrayList) result.get("Activities");
        return resultsArray;
    }

    public void postUrl(String url, ArrayList<String[]> params) {
        String baseURL = testingURL+url;
        for (int i=0; i<params.size(); i++) {
            if (i != 0) {
                baseURL += "&";
            } else {
                baseURL += "?";
            }
            baseURL = baseURL + params.get(i)[0].replaceAll(" ", "+") + "=" + params.get(i)[1].replaceAll(" ", "+");
        }
        System.out.println(baseURL);
        ConnectionRequest req2=new ConnectionRequest();
        req2.setPost(true);
        req2.setUrl(baseURL);
//        req2.addArgument("name", "hales-programming");
//        req2.addArgument("password", "something");
        NetworkManager.getInstance().addToQueueAndWait(req2);
    }

    public ArrayList<LinkedHashMap> getGroupById(String id) {
        String baseURL = testingURL+id+"/get-group/";
        System.out.println(baseURL);
        ConnectionRequest req2=new ConnectionRequest();
        req2.setPost(false);
        req2.setUrl(baseURL);
        NetworkManager.getInstance().addToQueueAndWait(req2);
        JSONParser parser = new JSONParser();

        Map result = null;
        ArrayList activities=null;
        try {
            result =  parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req2.getResponseData())));

        } catch (IOException e) {
            e.printStackTrace();
        }

        ArrayList<LinkedHashMap> resultsArray = (ArrayList<LinkedHashMap>) result.get("root");

//        activities = (ArrayList) result.get("Activities");
        return resultsArray;
    }


    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
